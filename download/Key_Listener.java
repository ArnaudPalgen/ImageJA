
import ij.*;
import ij.plugin.filter.PlugInFilter;
import ij.process.*;
import ij.gui.*;
import java.awt.event.*;

/**
	This plugin implements the KeyListener interface and listens
	for key events generated by the current image.
*/
public class Key_Listener implements PlugInFilter, KeyListener {
	ImagePlus img;

	public int setup(String arg, ImagePlus img) {
		this.img = img;
		return DOES_ALL+NO_CHANGES;
	}

	public void run(ImageProcessor ip) {
		ImageWindow win = img.getWindow();
		ImageCanvas canvas = win.getCanvas();
		canvas.addKeyListener(this);
	}
	
	public void keyPressed(KeyEvent e) {
		int keyCode = e.getKeyCode();
		char keyChar = e.getKeyChar();
		int flags = e.getModifiers();
		IJ.write("keyCode=" + keyCode + " (" + KeyEvent.getKeyText(keyCode)
			+ ") keyChar=\"" + keyChar + "\" (" + (int)keyChar + ") "
			+ KeyEvent.getKeyModifiersText(flags));
	}

	public void keyReleased(KeyEvent e) {}
	public void keyTyped(KeyEvent e) {}

	/** Returns the current list of modifier keys. */
	public String modifiers(int flags) {
		String s = " [ ";
		if (flags == 0) return "";
		if ((flags & KeyEvent.SHIFT_MASK) != 0) s += "Shift ";
		if ((flags & KeyEvent.CTRL_MASK) != 0) s += "Control ";
		if ((flags & KeyEvent.META_MASK) != 0) s += "Meta ";
		if ((flags & KeyEvent.ALT_MASK) != 0) s += "Alt ";
		s += "] ";
		return s;
	}
}


